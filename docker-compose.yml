services:
    bot:
        container_name: bot
        build:
            context: ./
            dockerfile: Dockerfile
            args:
                REQUIREMENTS: requirements-bot.txt
        restart: on-failure
        command: python src/tactic/presentation/bot.py
        env_file:
            - .env
        volumes:
            - ./src/tactic/infrastructure/db/migrations/versions:/app/src/tactic/infrastructure/db/migrations/versions
            - ./src:/app/src #TODO: Remove for production
        depends_on:
            - migration
            - bot_redis
        

    migration:
        container_name: migration
        build:
            context: ./
            dockerfile: Dockerfile
            args:
                REQUIREMENTS: requirements-migration.txt
        restart: on-failure
        env_file:
            - .env
        depends_on:
            db:
                condition: service_healthy

        volumes:
            - ./src/tactic/infrastructure/db/migrations/versions:/app/src/tactic/infrastructure/db/migrations/versions

        command: [ "python", "src/tactic/infrastructure/db/migrations/upload_data/run_migrations.py" ]

    db:
        container_name: db
        image: postgres:17.2-alpine
        restart: on-failure
        env_file:
            - .env
        volumes:
            - db_data:/var/lib/postgresql/data/
        ports: # TODO: Remove for production
            - "5433:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
            interval: 2s
            timeout: 60s
            retries: 10
            start_period: 5s

    test-db:
        container_name: test-db
        image: postgres:17.2-alpine
        restart: on-failure
        env_file:
            - .env.test
        volumes:
            - db_data-test:/var/lib/postgresql/data/
        ports: # TODO: Remove for production
            - "5434:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
            interval: 2s
            timeout: 60s
            retries: 10
            start_period: 5s

    test-runner:
        container_name: test-runner
        build:
            context: ./
            dockerfile: Dockerfile
            args:
                REQUIREMENTS: requirements-test.txt
        depends_on:
            test-db:
                condition: service_healthy
            test_bot_redis:
                condition: service_started

        env_file:
            - .env.test
        environment:
            APP_ENV: docker
        volumes:
            - ./src:/app/src #TODO: Remove for production
        command: pytest -v -p pytest_asyncio 
        #command: tail -f /dev/null

    bot_redis:
        container_name: redis
        image: redis:7.4.2-alpine
        restart: on-failure
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data


    test_bot_redis:
        container_name: test-redis
        image: redis:7.4.2-alpine
        restart: on-failure
        ports:
            - "6378:6379"
        volumes:
            - redis_data-test:/data
 

    qdrant:
        container_name: qdrant
        image: qdrant/qdrant:v1.13.6
        restart: on-failure
        volumes:
            - qdrant_data:/qdrant/storage


    vector_db_service:
        container_name: vector_db_service
        build:
            context: .
            dockerfile: Dockerfile.vector_db
            args:
                REQUIREMENTS: requirements-db.txt

        #command: tail -f /dev/null
        command: python -m vector_db_service.app.main
        env_file:
            - .env.vector_db
            - .env
        ports:
            - "8000:8000"
        depends_on: 
            - qdrant
        volumes:
            - ./src:/app/src
            - ~/.cache/huggingface:/root/.cache/huggingface

        restart: on-failure

        healthcheck:
            test: ["CMD", "/bin/sh", "-c", "./src/vector_db_service/healthcheck.sh"] #["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 7s


    arq_worker:
        container_name: arq_worker
        build:
            context: .
            dockerfile: Dockerfile
            args:
                REQUIREMENTS: requirements-bot.txt
        volumes:
            - ./src:/app/src

        env_file:
            - .env
        command: arq tactic.presentation.notification.worker.WorkerSettings
        healthcheck:
            test: ["CMD", "arq", "--check", "demo.WorkerSettings"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        depends_on:
            - bot_redis



volumes:
    db_data:
    redis_data:
    qdrant_data:
    db_data-test:
    redis_data-test:

