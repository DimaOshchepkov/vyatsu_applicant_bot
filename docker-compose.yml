services:
    bot:
        container_name: bot
        build: ./
        restart: on-failure
        command: python src/tactic/presentation/bot.py
        env_file:
            - .env
        volumes:
            - ./src/tactic/infrastructure/db/migrations/versions:/app/src/tactic/infrastructure/db/migrations/versions
            - ./src:/app/src #TODO: Удалить для продакшена
        depends_on:
            - migration
            - bot_redis
        networks:
            - internal_network 
        

    migration:
        container_name: migration
        build: ./
        restart: on-failure
        env_file:
            - .env
        depends_on:
            db:
                condition: service_healthy

        volumes:
            - ./src/tactic/infrastructure/db/migrations/versions:/app/src/tactic/infrastructure/db/migrations/versions

        command: [ "alembic", "upgrade", "head" ]

    db:
        container_name: db
        image: postgres:17.2-alpine
        restart: on-failure
        env_file:
            - .env
        volumes:
            - db_data:/var/lib/postgresql/data/
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
            interval: 2s
            timeout: 60s
            retries: 10
            start_period: 5s

    bot_redis:
        container_name: redis
        image: redis:7.4.2-alpine
        restart: on-failure
        ports:
            - "6379:6378"
        volumes:
            - redis_data:/data

    qdrant:
        container_name: qdrant
        image: qdrant/qdrant:v1.13.6
        restart: on-failure
        volumes:
            - qdrant_data:/qdrant/storage
        networks:
            - internal_network  # Указываем сеть, доступную только для контейнеров
        healthcheck:
            test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/collections"]  # проверка на доступность API
            interval: 5s
            timeout: 5s
            retries: 10

    qdrant-init:
        container_name: qdrant-init
        build: ./  
        command: python src/tactic/infrastructure/qdrant/load_faq_collection.py
        env_file:
            - .env
        depends_on:
            qdrant:
                condition: service_healthy
        networks:
            - internal_network
        volumes:
            - ./src:/app/src  # чтобы видеть код внутри контейнера
        restart: "no"


volumes:
    db_data:
    redis_data:
    qdrant_data:

networks:
    internal_network:
        driver: bridge