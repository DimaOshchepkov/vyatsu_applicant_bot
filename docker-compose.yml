services:
    bot:
        container_name: bot
        build:
            context: ./
            dockerfile: Dockerfile
            args:
                EXTRA_GROUP: bot
        restart: on-failure
        command: python src/tactic/presentation/bot.py
        env_file:
            - .env
        volumes:
            - ./src/tactic/infrastructure/db/migrations/versions:/app/src/tactic/infrastructure/db/migrations/versions
            - ./src:/app/src #TODO: Удалить для продакшена
        depends_on:
            - migration
            - bot_redis
        

    migration:
        container_name: migration
        build:
            context: ./
            dockerfile: Dockerfile
            args:
                EXTRA_GROUP: migration
        restart: on-failure
        env_file:
            - .env
        depends_on:
            db:
                condition: service_healthy

        volumes:
            - ./src/tactic/infrastructure/db/migrations/versions:/app/src/tactic/infrastructure/db/migrations/versions

        command: [ "alembic", "upgrade", "head" ]

    db:
        container_name: db
        image: postgres:17.2-alpine
        restart: on-failure
        env_file:
            - .env
        volumes:
            - db_data:/var/lib/postgresql/data/
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
            interval: 2s
            timeout: 60s
            retries: 10
            start_period: 5s

    bot_redis:
        container_name: redis
        image: redis:7.4.2-alpine
        restart: on-failure
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
 

    qdrant:
        container_name: qdrant
        image: qdrant/qdrant:v1.13.6
        restart: on-failure
        volumes:
            - qdrant_data:/qdrant/storage


    vector_db_service:
        container_name: vector_db_service
        build:
            context: ./vector_db_service
            dockerfile: Dockerfile
            args:
                EXTRA_GROUP: vector_db_service

        #command: tail -f /dev/null
        command: python -m app.main
        env_file:
            - ./vector_db_service/.env
        ports:
            - "8000:8000"
        depends_on: 
            - qdrant
        volumes:
            - ./vector_db_service:/app

        restart: on-failure

        healthcheck:
            test: ["CMD", "python", "-c", "import requests; exit(0) if requests.get('http://localhost:8000').ok else exit(1)"]
            interval: 5s
            timeout: 3s
            retries: 5


volumes:
    db_data:
    redis_data:
    qdrant_data:

