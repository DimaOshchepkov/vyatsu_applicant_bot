import asyncio
import logging
import subprocess
import sys

from sqlalchemy.ext.asyncio import (
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)

from shared.models import Category, Program, SubjectAlias
from tactic.infrastructure.db.migrations.upload_data.add_alias.load import (
    load as add_alias,
)
from tactic.infrastructure.db.migrations.upload_data.create_question_and_categories.load import (
    load as load_questions,
)
from tactic.infrastructure.db.migrations.upload_data.education_areas.load import (
    load as load_areas,
)
from tactic.infrastructure.db.migrations.upload_data.table_exist_and_empty import table_exists_and_empty
from tactic.settings import db_settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()  # –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä


def run_migrations():
    logger.info("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic...")
    try:
        subprocess.run(["alembic", "upgrade", "head"], check=True)
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
    except subprocess.CalledProcessError as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: %s", e)
        sys.exit(1)





async def run_async_checks():
    engine = create_async_engine(
        db_settings.get_connection_url(),
        future=True,
    )
    session_factory = async_sessionmaker(
        engine, expire_on_commit=False, class_=AsyncSession
    )

    if await table_exists_and_empty(engine, Category):
        logger.info(
            f"–¢–∞–±–ª–∏—Ü–∞ '{Category.__tablename__}' –ø—É—Å—Ç–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."
        )
        await load_questions(session_factory)

    if await table_exists_and_empty(engine, Program):
        logger.info(
            f"–¢–∞–±–ª–∏—Ü–∞ '{Program.__tablename__}' –ø—É—Å—Ç–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."
        )
        await load_areas(session_factory)

    if await table_exists_and_empty(engine, SubjectAlias):
        logger.info(
            f"–¢–∞–±–ª–∏—Ü–∞ '{SubjectAlias.__tablename__}' –ø—É—Å—Ç–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."
        )
        await add_alias(session_factory)



def main():
    run_migrations()
    asyncio.run(run_async_checks())


if __name__ == "__main__":
    main()
